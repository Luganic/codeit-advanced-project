// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  formDataBodySerializer,
} from '@hey-api/client-axios';
import { InternalAxiosRequestConfig } from 'axios';
import Cookies from 'js-cookie';

import { BASE_URL } from '@/shared/constants/constants';

import type {
  MeData,
  MeError,
  MeResponse,
  UpdateMeData,
  UpdateMeError,
  UpdateMeResponse,
  UserRankingData,
  UserRankingError,
  UserRankingResponse,
  UserDetailData,
  UserDetailError,
  UserDetailResponse,
  ListUserCreatedProductsData,
  ListUserCreatedProductsError,
  ListUserCreatedProductsResponse,
  ListUserReviewedProductsData,
  ListUserReviewedProductsError,
  ListUserReviewedProductsResponse,
  ListUserFavoriteProductsData,
  ListUserFavoriteProductsError,
  ListUserFavoriteProductsResponse,
  ListUserFolloweesData,
  ListUserFolloweesError,
  ListUserFolloweesResponse,
  ListUserFollowersData,
  ListUserFollowersError,
  ListUserFollowersResponse,
  LikeReviewData,
  LikeReviewError,
  LikeReviewResponse,
  UnlikeReviewData,
  UnlikeReviewError,
  UnlikeReviewResponse,
  CreateReviewData,
  CreateReviewError,
  CreateReviewResponse,
  DeleteReviewData,
  DeleteReviewError,
  DeleteReviewResponse,
  UpdateReviewData,
  UpdateReviewError,
  UpdateReviewResponse,
  ListProductData,
  ListProductError,
  ListProductResponse,
  CreateProductData,
  CreateProductError,
  CreateProductResponse,
  RetrieveProductData,
  RetrieveProductError,
  RetrieveProductResponse,
  UpdateProductData,
  UpdateProductError,
  UpdateProductResponse,
  DeleteProductData,
  DeleteProductError,
  DeleteProductResponse,
  ListReviewsData,
  ListReviewsError,
  ListReviewsResponse,
  UpsertOauthAppData,
  UpsertOauthAppError,
  UpsertOauthAppResponse,
  ImageUploadData,
  ImageUploadError,
  ImageUploadResponse,
  FollowData,
  FollowError,
  FollowResponse,
  UnfollowData,
  UnfollowError,
  UnfollowResponse,
  FavoriteData,
  FavoriteError,
  FavoriteResponse,
  UnfavoriteData,
  UnfavoriteError,
  UnfavoriteResponse,
  ListAllCategoryData,
  ListAllCategoryError,
  ListAllCategoryResponse,
  SignUpData,
  SignUpError,
  SignUpResponse2,
  SignInData,
  SignInError,
  SignInResponse2,
  SignUpOauthData,
  SignUpOauthError,
  SignUpOauthResponse,
  SignInOauthData,
  SignInOauthError,
  SignInOauthResponse,
} from './types.gen';

export const client = createClient(createConfig());

client.setConfig({
  baseURL: BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

client.instance.interceptors.request.use(
  (config: InternalAxiosRequestConfig): InternalAxiosRequestConfig => {
    const accessToken = Cookies.get('accessToken');

    if (accessToken) {
      config.headers.Authorization = `Bearer ${accessToken}`;
    }

    return config;
  },
  (error) => {
    return Promise.reject(error);
  },
);

/**
 * 내 정보 조회
 */
export const me = <ThrowOnError extends boolean = false>(
  options: Options<MeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<MeResponse, MeError, ThrowOnError>({
    ...options,
    url: '/{teamId}/users/me',
  });
};

/**
 * 내 정보 수정
 */
export const updateMe = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<UpdateMeResponse, UpdateMeError, ThrowOnError>({
    ...options,
    url: '/{teamId}/users/me',
  });
};

/**
 * 유저 랭킹 조회
 */
export const userRanking = <ThrowOnError extends boolean = false>(
  options: Options<UserRankingData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<UserRankingResponse, UserRankingError, ThrowOnError>({
    ...options,
    url: '/{teamId}/users/ranking',
  });
};

/**
 * 유저 정보 조회
 */
export const userDetail = <ThrowOnError extends boolean = false>(
  options: Options<UserDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<UserDetailResponse, UserDetailError, ThrowOnError>({
    ...options,
    url: '/{teamId}/users/{userId}',
  });
};

/**
 * 유저가 생성한 상품 조회
 */
export const listUserCreatedProducts = <ThrowOnError extends boolean = false>(
  options: Options<ListUserCreatedProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListUserCreatedProductsResponse,
    ListUserCreatedProductsError,
    ThrowOnError
  >({
    ...options,
    url: '/{teamId}/users/{userId}/created-products',
  });
};

/**
 * 유저가 리뷰한 상품 조회
 */
export const listUserReviewedProducts = <ThrowOnError extends boolean = false>(
  options: Options<ListUserReviewedProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListUserReviewedProductsResponse,
    ListUserReviewedProductsError,
    ThrowOnError
  >({
    ...options,
    url: '/{teamId}/users/{userId}/reviewed-products',
  });
};

/**
 * 유저가 찜한 상품 조회
 */
export const listUserFavoriteProducts = <ThrowOnError extends boolean = false>(
  options: Options<ListUserFavoriteProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListUserFavoriteProductsResponse,
    ListUserFavoriteProductsError,
    ThrowOnError
  >({
    ...options,
    url: '/{teamId}/users/{userId}/favorite-products',
  });
};

/**
 * 유저가 팔로우한 유저 조회
 */
export const listUserFollowees = <ThrowOnError extends boolean = false>(
  options: Options<ListUserFolloweesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListUserFolloweesResponse,
    ListUserFolloweesError,
    ThrowOnError
  >({
    ...options,
    url: '/{teamId}/users/{userId}/followees',
  });
};

/**
 * 유저를 팔로우한 유저 조회
 */
export const listUserFollowers = <ThrowOnError extends boolean = false>(
  options: Options<ListUserFollowersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListUserFollowersResponse,
    ListUserFollowersError,
    ThrowOnError
  >({
    ...options,
    url: '/{teamId}/users/{userId}/followers',
  });
};

/**
 * 리뷰 좋아요
 */
export const likeReview = <ThrowOnError extends boolean = false>(
  options: Options<LikeReviewData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<LikeReviewResponse, LikeReviewError, ThrowOnError>({
    ...options,
    url: '/{teamId}/reviews/{reviewId}/like',
  });
};

/**
 * 리뷰 좋아요 취소
 */
export const unlikeReview = <ThrowOnError extends boolean = false>(
  options: Options<UnlikeReviewData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<UnlikeReviewResponse, UnlikeReviewError, ThrowOnError>({
    ...options,
    url: '/{teamId}/reviews/{reviewId}/like',
  });
};

/**
 * 리뷰 생성
 */
export const createReview = <ThrowOnError extends boolean = false>(
  options: Options<CreateReviewData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateReviewResponse, CreateReviewError, ThrowOnError>({
    ...options,
    url: '/{teamId}/reviews',
  });
};

/**
 * 리뷰 삭제
 */
export const deleteReview = <ThrowOnError extends boolean = false>(
  options: Options<DeleteReviewData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<DeleteReviewResponse, DeleteReviewError, ThrowOnError>({
    ...options,
    url: '/{teamId}/reviews/{reviewId}',
  });
};

/**
 * 리뷰 수정 <br/>
 * 이미지를 수정할 때, 기존 이미지를 유지하려면 id를, 새로운 이미지를 추가하려면 source를 넣어주세요. <br />
 * 요청에 포함되지 않는 기존 이미지는 삭제됩니다.
 */
export const updateReview = <ThrowOnError extends boolean = false>(
  options: Options<UpdateReviewData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<UpdateReviewResponse, UpdateReviewError, ThrowOnError>({
    ...options,
    url: '/{teamId}/reviews/{reviewId}',
  });
};

/**
 * 상품 목록 조회
 */
export const listProduct = <ThrowOnError extends boolean = false>(
  options: Options<ListProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListProductResponse, ListProductError, ThrowOnError>({
    ...options,
    url: '/{teamId}/products',
  });
};

/**
 * 상품 생성
 */
export const createProduct = <ThrowOnError extends boolean = false>(
  options: Options<CreateProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateProductResponse, CreateProductError, ThrowOnError>({
    ...options,
    url: '/{teamId}/products',
  });
};

/**
 * 상품 상세 조회
 */
export const retrieveProduct = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RetrieveProductResponse,
    RetrieveProductError,
    ThrowOnError
  >({
    ...options,
    url: '/{teamId}/products/{productId}',
  });
};

/**
 * 상품 수정
 */
export const updateProduct = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<UpdateProductResponse, UpdateProductError, ThrowOnError>(
    {
      ...options,
      url: '/{teamId}/products/{productId}',
    },
  );
};

/**
 * 상품 삭제
 */
export const deleteProduct = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteProductResponse,
    DeleteProductError,
    ThrowOnError
  >({
    ...options,
    url: '/{teamId}/products/{productId}',
  });
};

/**
 * 상품 리뷰 목록 조회
 */
export const listReviews = <ThrowOnError extends boolean = false>(
  options: Options<ListReviewsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListReviewsResponse, ListReviewsError, ThrowOnError>({
    ...options,
    url: '/{teamId}/products/{productId}/reviews',
  });
};

/**
 * 간편 로그인 App 등록/수정<br/>
 * Google, Kakao 간편 로그인을 위한 App 을 등록하거나 수정합니다.<br/>
 * 이미 등록된 앱이 있을 경우 덮어씌워집니다.
 *
 * 요청 데이터 중 appKey 는 각 서비스에서 발급받은 인증 키 입니다.<br/>
 * Google 의 경우에는 <b>"클라이언트 id"</b> 입니다.<br/>
 * Kakao 의 경우에는 <b>"REST API 키"</b> 입니다.<br/>
 * 실습을 위해 발급받은 키를 등록해주세요. 실제 서비스에서 사용 하는 키를 등록해서는 안됩니다.
 */
export const upsertOauthApp = <ThrowOnError extends boolean = false>(
  options: Options<UpsertOauthAppData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpsertOauthAppResponse,
    UpsertOauthAppError,
    ThrowOnError
  >({
    ...options,
    url: '/{teamId}/oauthApps',
  });
};

/**
 * 이미지 업로드,
 * 프로젝트에 저장하는 이미지들은 이 엔드포인트를 통해 업로드한 후 URL을 획득하여 사용합니다.
 */
export const imageUpload = <ThrowOnError extends boolean = false>(
  options: Options<ImageUploadData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ImageUploadResponse, ImageUploadError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
    url: '/{teamId}/images/upload',
  });
};

/**
 * 유저 팔로우
 */
export const follow = <ThrowOnError extends boolean = false>(
  options: Options<FollowData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<FollowResponse, FollowError, ThrowOnError>({
    ...options,
    url: '/{teamId}/follow',
  });
};

/**
 * 유저 언팔로우
 */
export const unfollow = <ThrowOnError extends boolean = false>(
  options: Options<UnfollowData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<UnfollowResponse, UnfollowError, ThrowOnError>({
    ...options,
    url: '/{teamId}/follow',
  });
};

/**
 * 상품 찜하기
 */
export const favorite = <ThrowOnError extends boolean = false>(
  options: Options<FavoriteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<FavoriteResponse, FavoriteError, ThrowOnError>({
    ...options,
    url: '/{teamId}/products/{productId}/favorite',
  });
};

/**
 * 상품 찜하기 취소
 */
export const unfavorite = <ThrowOnError extends boolean = false>(
  options: Options<UnfavoriteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<UnfavoriteResponse, UnfavoriteError, ThrowOnError>({
    ...options,
    url: '/{teamId}/products/{productId}/favorite',
  });
};

export const listAllCategory = <ThrowOnError extends boolean = false>(
  options: Options<ListAllCategoryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListAllCategoryResponse,
    ListAllCategoryError,
    ThrowOnError
  >({
    ...options,
    url: '/{teamId}/categories',
  });
};

/**
 * 회원가입
 */
export const signUp = <ThrowOnError extends boolean = false>(
  options: Options<SignUpData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<SignUpResponse2, SignUpError, ThrowOnError>({
    ...options,
    url: '/{teamId}/auth/signUp',
  });
};

/**
 * 로그인
 */
export const signIn = <ThrowOnError extends boolean = false>(
  options: Options<SignInData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<SignInResponse2, SignInError, ThrowOnError>({
    ...options,
    url: '/{teamId}/auth/signIn',
  });
};

/**
 * 간편 회원가입
 */
export const signUpOauth = <ThrowOnError extends boolean = false>(
  options: Options<SignUpOauthData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<SignUpOauthResponse, SignUpOauthError, ThrowOnError>({
    ...options,
    url: '/{teamId}/auth/signUp/{provider}',
  });
};

/**
 * 간편 로그인
 */
export const signInOauth = <ThrowOnError extends boolean = false>(
  options: Options<SignInOauthData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<SignInOauthResponse, SignInOauthError, ThrowOnError>({
    ...options,
    url: '/{teamId}/auth/signIn/{provider}',
  });
};
