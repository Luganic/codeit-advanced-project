// This file is auto-generated by @hey-api/openapi-ts

export type Id = number;

export type UrlType = string;

export type User = {
  updatedAt: string;
  createdAt: string;
  teamId: string;
  image: UrlType | null;
  description: string;
  nickname: string;
  id: Id;
};

export type UserDetail = User & {
  mostFavoriteCategory: {
    name: string;
    id: Id;
  } | null;
  averageRating: number;
  reviewCount: number;
  followeesCount: number;
  followersCount: number;
  isFollowing: boolean;
};

export type Nickname = string;

export type UpdateUserRequestBody = {
  description?: string;
  nickname?: Nickname;
  image?: UrlType;
};

export type UserRanking = User & {
  reviewCount: number;
  followersCount: number;
};

export type ProductListType = {
  updatedAt: string;
  createdAt: string;
  writerId: Id;
  categoryId: Id;
  favoriteCount: number;
  reviewCount: number;
  rating: number;
  image: UrlType;
  name: string;
  id: Id;
};

export type CursorBasedPaginationResponse_ProductListType_ = {
  nextCursor: number | null;
  list: Array<ProductListType>;
};

export type CursorBasedPaginationResponse__id_number__followee_User__ = {
  nextCursor: number | null;
  list: Array<{
    followee: User;
    id: Id;
  }>;
};

export type CursorBasedPaginationResponse__id_number__follower_User__ = {
  nextCursor: number | null;
  list: Array<{
    follower: User;
    id: Id;
  }>;
};

export type Review = {
  user: {
    image: UrlType | null;
    nickname: string;
    id: Id;
  };
  reviewImages: Array<{
    source: UrlType;
    id: Id;
  }>;
  productId: Id;
  userId: Id;
  updatedAt: string;
  createdAt: string;
  isLiked: boolean;
  likeCount: number;
  content: string;
  rating: number;
  id: Id;
};

export type Rating = number;

export type ReviewContent = string;

export type CreateReviewRequestBody = {
  productId: Id;
  /**
   * 이미지 URL 입니다. 최대 3개까지 가능합니다.
   */
  images?: Array<UrlType>;
  content: ReviewContent;
  rating: Rating;
};

export type UpdateReviewRequestBody = {
  /**
   * 기존 이미지를 유지하려면 id를, 새로운 이미지를 추가하려면 source를 넣어주세요. <br />
   * 요청에 포함되지 않는 기존 이미지는 삭제됩니다.
   */
  images?: Array<
    | {
        id: Id;
      }
    | {
        source: UrlType;
      }
  >;
  content?: ReviewContent;
  rating?: Rating;
};

export type SearchProductResponse = CursorBasedPaginationResponse_ProductListType_;

export type ProductDetailType = ProductListType & {
  /**
   * 동일 카테고리 지표
   */
  categoryMetric: {
    reviewCount: number;
    favoriteCount: number;
    rating: number;
  };
  category: {
    name: string;
    id: Id;
  };
  isFavorite: boolean;
  description: string;
};

/**
 * 상품 이름
 */
export type ProductName = string;

/**
 * 상품 설명
 */
export type ProductDescription = string;

export type CreateProductRequestBody = {
  categoryId: Id;
  image: UrlType;
  description: ProductDescription;
  name: ProductName;
};

export type UpdateProductRequestBody = {
  categoryId: Id;
  image: UrlType;
  description: ProductDescription;
  name: ProductName;
};

export type CursorBasedPaginationResponse_Review_ = {
  nextCursor: number | null;
  list: Array<Review>;
};

export type ListReviewResponse = CursorBasedPaginationResponse_Review_;

export type OauthApp = {
  createdAt: string;
  updatedAt: string;
  appKey: string;
  provider: string;
  teamId: string;
  id: Id;
};

export type OauthProvider = 'google' | 'kakao';

export type UpsertOauthAppRequestBody = {
  /**
   * 간편 로그인을 위한 인증 키 입니다.
   * Google 의 경우에는 "클라이언트 id" 입니다.
   * Kakao 의 경우에는 "REST API 키" 입니다.
   * 실습을 위해 발급받은 키를 등록해주세요. 실제 서비스에서 사용 하는 키는 등록하시면 안됩니다.
   */
  appKey: string;
  provider: OauthProvider;
};

export type FollowRequestBody = {
  /**
   * 팔로우할 유저의 id
   */
  userId: Id;
};

export type Category = {
  updatedAt: string;
  createdAt: string;
  name: string;
  id: Id;
};

export type Email = string;

export type SignUpResponse = {
  accessToken: string;
  user: User & {
    email: Email;
  };
};

export type Password = string;

export type SignUpRequestBody = {
  passwordConfirmation: Password;
  password: Password;
  nickname: Nickname;
  email: Email;
};

export type SignInResponse = {
  accessToken: string;
  user: User & {
    email: Email;
  };
};

export type SignInRequestBody = {
  password: Password;
  email: Email;
};

/**
 * 간편 로그인 과정을 통해 발급받은 토큰입니다.<br />
 * Google 의 경우에는 <b>Google Id 토큰</b>(JWT) 입니다.<br/>
 * Kakao 의 경우에는 <b>인가 코드</b> 입니다.
 */
export type OauthToken = string;

export type SignInWithOauthRequestBody = {
  /**
   * Kakao 의 경우에는 필수입니다.<br/>
   * 인가 코드를 얻을 때 사용하였던 redirect_uri 값을 그대로 사용합니다.
   */
  redirectUri?: string;
  token: OauthToken;
};

export type SignUpWithOauthRequestBody = {
  nickname: Nickname;
} & SignInWithOauthRequestBody;

export type MeData = {
  path: {
    teamId: string;
  };
};

export type MeResponse = UserDetail;

export type MeError = unknown;

export type UpdateMeData = {
  body: UpdateUserRequestBody;
  path: {
    teamId: string;
  };
};

export type UpdateMeResponse = User & {
  description: string;
};

export type UpdateMeError = unknown;

export type UserRankingData = {
  path: {
    teamId: string;
  };
};

export type UserRankingResponse = Array<UserRanking>;

export type UserRankingError = unknown;

export type UserDetailData = {
  path: {
    teamId: string;
    userId: Id;
  };
};

export type UserDetailResponse = UserDetail;

export type UserDetailError = unknown;

export type ListUserCreatedProductsData = {
  path: {
    teamId: string;
    userId: Id;
  };
  query?: {
    /**
     * 다음 페이지를 위한 커서
     */
    cursor?: number;
  };
};

export type ListUserCreatedProductsResponse = CursorBasedPaginationResponse_ProductListType_;

export type ListUserCreatedProductsError = unknown;

export type ListUserReviewedProductsData = {
  path: {
    teamId: string;
    userId: Id;
  };
  query?: {
    /**
     * 다음 페이지를 위한 커서
     */
    cursor?: number;
  };
};

export type ListUserReviewedProductsResponse = CursorBasedPaginationResponse_ProductListType_;

export type ListUserReviewedProductsError = unknown;

export type ListUserFavoriteProductsData = {
  path: {
    teamId: string;
    userId: Id;
  };
  query?: {
    /**
     * 다음 페이지를 위한 커서
     */
    cursor?: number;
  };
};

export type ListUserFavoriteProductsResponse = CursorBasedPaginationResponse_ProductListType_;

export type ListUserFavoriteProductsError = unknown;

export type ListUserFolloweesData = {
  path: {
    teamId: string;
    userId: Id;
  };
  query?: {
    cursor?: number;
  };
};

export type ListUserFolloweesResponse = CursorBasedPaginationResponse__id_number__followee_User__;

export type ListUserFolloweesError = unknown;

export type ListUserFollowersData = {
  path: {
    teamId: string;
    userId: Id;
  };
  query?: {
    cursor?: number;
  };
};

export type ListUserFollowersResponse = CursorBasedPaginationResponse__id_number__follower_User__;

export type ListUserFollowersError = unknown;

export type LikeReviewData = {
  path: {
    reviewId: Id;
    teamId: string;
  };
};

export type LikeReviewResponse = Review;

export type LikeReviewError = unknown;

export type UnlikeReviewData = {
  path: {
    reviewId: Id;
    teamId: string;
  };
};

export type UnlikeReviewResponse = Review;

export type UnlikeReviewError = unknown;

export type CreateReviewData = {
  body: CreateReviewRequestBody;
  path: {
    teamId: string;
  };
};

export type CreateReviewResponse = Review;

export type CreateReviewError = unknown;

export type DeleteReviewData = {
  path: {
    reviewId: Id;
    teamId: string;
  };
};

export type DeleteReviewResponse = {
  productId: Id;
  userId: Id;
  updatedAt: string;
  createdAt: string;
  likeCount: number;
  rating: number;
  content: string;
  id: Id;
};

export type DeleteReviewError = unknown;

export type UpdateReviewData = {
  body: UpdateReviewRequestBody;
  path: {
    reviewId: Id;
    teamId: string;
  };
};

export type UpdateReviewResponse = Review;

export type UpdateReviewError = unknown;

export type ListProductData = {
  path: {
    /**
     * 팀 ID
     */
    teamId: string;
  };
  query?: {
    /**
     * 카테고리 ID
     */
    category?: Id;
    /**
     * 다음 페이지를 위한 커서
     */
    cursor?: number;
    /**
     * 상품명 검색 키워드
     */
    keyword?: string;
    order?: 'recent' | 'rating' | 'reviewCount';
  };
};

export type ListProductResponse = CursorBasedPaginationResponse_ProductListType_;

export type ListProductError = unknown;

export type CreateProductData = {
  body: CreateProductRequestBody;
  path: {
    teamId: string;
  };
};

export type CreateProductResponse = ProductDetailType;

export type CreateProductError = unknown;

export type RetrieveProductData = {
  path: {
    productId: Id;
    teamId: string;
  };
};

export type RetrieveProductResponse = ProductDetailType;

export type RetrieveProductError = {
  message: string;
};

export type UpdateProductData = {
  body: UpdateProductRequestBody;
  path: {
    productId: Id;
    teamId: string;
  };
};

export type UpdateProductResponse = ProductDetailType;

export type UpdateProductError = unknown;

export type DeleteProductData = {
  path: {
    productId: Id;
    teamId: string;
  };
};

export type DeleteProductResponse = {
  id: Id;
};

export type DeleteProductError = unknown;

export type ListReviewsData = {
  path: {
    productId: Id;
    teamId: string;
  };
  query?: {
    /**
     * 다음 페이지를 위한 커서
     */
    cursor?: number;
    /**
     * 정렬 순서
     */
    order?: 'recent' | 'ratingDesc' | 'ratingAsc' | 'likeCount';
  };
};

export type ListReviewsResponse = CursorBasedPaginationResponse_Review_;

export type ListReviewsError = {
  message: string;
};

export type UpsertOauthAppData = {
  body: UpsertOauthAppRequestBody;
  path: {
    teamId: string;
  };
};

export type UpsertOauthAppResponse = OauthApp;

export type UpsertOauthAppError = unknown;

export type ImageUploadData = {
  body: {
    /**
     * 이미지 파일, 최대 용량은 5MB입니다.
     */
    image: Blob | File;
  };
  path: {
    teamId: string;
  };
};

export type ImageUploadResponse = {
  url: string;
};

export type ImageUploadError = unknown;

export type FollowData = {
  body: FollowRequestBody;
  path: {
    teamId: string;
  };
};

export type FollowResponse = UserDetail;

export type FollowError = unknown;

export type UnfollowData = {
  body: FollowRequestBody;
  path: {
    teamId: string;
  };
};

export type UnfollowResponse = UserDetail;

export type UnfollowError = unknown;

export type FavoriteData = {
  path: {
    /**
     * 찜할 상품 ID
     */
    productId: Id;
    teamId: string;
  };
};

export type FavoriteResponse = ProductDetailType;

export type FavoriteError = unknown;

export type UnfavoriteData = {
  path: {
    /**
     * 찜할 상품 ID
     */
    productId: Id;
    teamId: string;
  };
};

export type UnfavoriteResponse = ProductDetailType;

export type UnfavoriteError = unknown;

export type ListAllCategoryData = {
  path: {
    teamId: string;
  };
};

export type ListAllCategoryResponse = Array<Category>;

export type ListAllCategoryError = unknown;

export type SignUpData = {
  body: SignUpRequestBody;
  path: {
    teamId: string;
  };
};

export type SignUpResponse2 = SignUpResponse;

export type SignUpError = unknown;

export type SignInData = {
  body: SignInRequestBody;
  path: {
    teamId: string;
  };
};

export type SignInResponse2 = SignInResponse;

export type SignInError = unknown;

export type SignUpOauthData = {
  body: SignUpWithOauthRequestBody;
  path: {
    provider: OauthProvider;
    teamId: string;
  };
};

export type SignUpOauthResponse = SignUpResponse;

export type SignUpOauthError = unknown;

export type SignInOauthData = {
  body: SignInWithOauthRequestBody;
  path: {
    provider: OauthProvider;
    teamId: string;
  };
};

export type SignInOauthResponse = SignInResponse;

export type SignInOauthError = {
  message: string;
};
