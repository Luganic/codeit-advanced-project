// This file is auto-generated by @hey-api/openapi-ts

export const IdSchema = {
  type: 'integer',
  format: 'int32',
  example: 1,
} as const;

export const UrlTypeSchema = {
  type: 'string',
  example: 'https://example.com/...',
  format: 'uri',
  pattern: '^https?://.+',
} as const;

export const UserSchema = {
  properties: {
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    teamId: {
      type: 'string',
    },
    image: {
      allOf: [
        {
          $ref: '#/components/schemas/UrlType',
        },
      ],
      nullable: true,
    },
    description: {
      type: 'string',
    },
    nickname: {
      type: 'string',
    },
    id: {
      $ref: '#/components/schemas/Id',
    },
  },
  required: ['updatedAt', 'createdAt', 'teamId', 'image', 'description', 'nickname', 'id'],
  type: 'object',
} as const;

export const UserDetailSchema = {
  allOf: [
    {
      $ref: '#/components/schemas/User',
    },
    {
      properties: {
        mostFavoriteCategory: {
          properties: {
            name: {
              type: 'string',
            },
            id: {
              $ref: '#/components/schemas/Id',
            },
          },
          required: ['name', 'id'],
          type: 'object',
          nullable: true,
        },
        averageRating: {
          type: 'number',
          format: 'double',
        },
        reviewCount: {
          type: 'number',
          format: 'double',
        },
        followeesCount: {
          type: 'number',
          format: 'double',
        },
        followersCount: {
          type: 'number',
          format: 'double',
        },
        isFollowing: {
          type: 'boolean',
        },
      },
      required: [
        'mostFavoriteCategory',
        'averageRating',
        'reviewCount',
        'followeesCount',
        'followersCount',
        'isFollowing',
      ],
      type: 'object',
    },
  ],
} as const;

export const NicknameSchema = {
  type: 'string',
  example: '닉네임',
  minLength: 1,
  maxLength: 20,
} as const;

export const UpdateUserRequestBodySchema = {
  properties: {
    description: {
      type: 'string',
      example: '안녕하세요',
      maxLength: 300,
    },
    nickname: {
      $ref: '#/components/schemas/Nickname',
    },
    image: {
      $ref: '#/components/schemas/UrlType',
    },
  },
  type: 'object',
} as const;

export const UserRankingSchema = {
  allOf: [
    {
      $ref: '#/components/schemas/User',
    },
    {
      properties: {
        reviewCount: {
          type: 'number',
          format: 'double',
        },
        followersCount: {
          type: 'number',
          format: 'double',
        },
      },
      required: ['reviewCount', 'followersCount'],
      type: 'object',
    },
  ],
} as const;

export const ProductListTypeSchema = {
  properties: {
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    writerId: {
      $ref: '#/components/schemas/Id',
    },
    categoryId: {
      $ref: '#/components/schemas/Id',
    },
    favoriteCount: {
      type: 'number',
      format: 'double',
    },
    reviewCount: {
      type: 'number',
      format: 'double',
    },
    rating: {
      type: 'number',
      format: 'double',
    },
    image: {
      $ref: '#/components/schemas/UrlType',
    },
    name: {
      type: 'string',
    },
    id: {
      $ref: '#/components/schemas/Id',
    },
  },
  required: [
    'updatedAt',
    'createdAt',
    'writerId',
    'categoryId',
    'favoriteCount',
    'reviewCount',
    'rating',
    'image',
    'name',
    'id',
  ],
  type: 'object',
} as const;

export const CursorBasedPaginationResponse_ProductListType_Schema = {
  properties: {
    nextCursor: {
      type: 'number',
      format: 'double',
      nullable: true,
    },
    list: {
      items: {
        $ref: '#/components/schemas/ProductListType',
      },
      type: 'array',
    },
  },
  required: ['nextCursor', 'list'],
  type: 'object',
} as const;

export const CursorBasedPaginationResponse__id_number__followee_User__Schema = {
  properties: {
    nextCursor: {
      type: 'number',
      format: 'double',
      nullable: true,
    },
    list: {
      items: {
        properties: {
          followee: {
            $ref: '#/components/schemas/User',
          },
          id: {
            $ref: '#/components/schemas/Id',
          },
        },
        required: ['followee', 'id'],
        type: 'object',
      },
      type: 'array',
    },
  },
  required: ['nextCursor', 'list'],
  type: 'object',
} as const;

export const CursorBasedPaginationResponse__id_number__follower_User__Schema = {
  properties: {
    nextCursor: {
      type: 'number',
      format: 'double',
      nullable: true,
    },
    list: {
      items: {
        properties: {
          follower: {
            $ref: '#/components/schemas/User',
          },
          id: {
            $ref: '#/components/schemas/Id',
          },
        },
        required: ['follower', 'id'],
        type: 'object',
      },
      type: 'array',
    },
  },
  required: ['nextCursor', 'list'],
  type: 'object',
} as const;

export const ReviewSchema = {
  properties: {
    user: {
      properties: {
        image: {
          allOf: [
            {
              $ref: '#/components/schemas/UrlType',
            },
          ],
          nullable: true,
        },
        nickname: {
          type: 'string',
        },
        id: {
          $ref: '#/components/schemas/Id',
        },
      },
      required: ['image', 'nickname', 'id'],
      type: 'object',
    },
    reviewImages: {
      items: {
        properties: {
          source: {
            $ref: '#/components/schemas/UrlType',
          },
          id: {
            $ref: '#/components/schemas/Id',
          },
        },
        required: ['source', 'id'],
        type: 'object',
      },
      type: 'array',
    },
    productId: {
      $ref: '#/components/schemas/Id',
    },
    userId: {
      $ref: '#/components/schemas/Id',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    isLiked: {
      type: 'boolean',
    },
    likeCount: {
      type: 'number',
      format: 'double',
    },
    content: {
      type: 'string',
    },
    rating: {
      type: 'number',
      format: 'double',
    },
    id: {
      $ref: '#/components/schemas/Id',
    },
  },
  required: [
    'user',
    'reviewImages',
    'productId',
    'userId',
    'updatedAt',
    'createdAt',
    'isLiked',
    'likeCount',
    'content',
    'rating',
    'id',
  ],
  type: 'object',
} as const;

export const RatingSchema = {
  type: 'number',
  format: 'float',
  minimum: 1,
  maximum: 5,
} as const;

export const ReviewContentSchema = {
  type: 'string',
  minLength: 1,
  maxLength: 300,
} as const;

export const CreateReviewRequestBodySchema = {
  properties: {
    productId: {
      $ref: '#/components/schemas/Id',
    },
    images: {
      items: {
        $ref: '#/components/schemas/UrlType',
      },
      type: 'array',
      description: '이미지 URL 입니다. 최대 3개까지 가능합니다.',
      maxItems: 3,
    },
    content: {
      $ref: '#/components/schemas/ReviewContent',
    },
    rating: {
      $ref: '#/components/schemas/Rating',
    },
  },
  required: ['productId', 'content', 'rating'],
  type: 'object',
} as const;

export const UpdateReviewRequestBodySchema = {
  properties: {
    images: {
      items: {
        anyOf: [
          {
            properties: {
              id: {
                $ref: '#/components/schemas/Id',
              },
            },
            required: ['id'],
            type: 'object',
          },
          {
            properties: {
              source: {
                $ref: '#/components/schemas/UrlType',
              },
            },
            required: ['source'],
            type: 'object',
          },
        ],
      },
      type: 'array',
      description: `기존 이미지를 유지하려면 id를, 새로운 이미지를 추가하려면 source를 넣어주세요. <br />
요청에 포함되지 않는 기존 이미지는 삭제됩니다.`,
      maxItems: 3,
    },
    content: {
      $ref: '#/components/schemas/ReviewContent',
    },
    rating: {
      $ref: '#/components/schemas/Rating',
    },
  },
  type: 'object',
} as const;

export const SearchProductResponseSchema = {
  $ref: '#/components/schemas/CursorBasedPaginationResponse_ProductListType_',
} as const;

export const ProductDetailTypeSchema = {
  allOf: [
    {
      $ref: '#/components/schemas/ProductListType',
    },
    {
      properties: {
        categoryMetric: {
          properties: {
            reviewCount: {
              type: 'number',
              format: 'double',
            },
            favoriteCount: {
              type: 'number',
              format: 'double',
            },
            rating: {
              type: 'number',
              format: 'double',
            },
          },
          required: ['reviewCount', 'favoriteCount', 'rating'],
          type: 'object',
          description: '동일 카테고리 지표',
        },
        category: {
          properties: {
            name: {
              type: 'string',
            },
            id: {
              $ref: '#/components/schemas/Id',
            },
          },
          required: ['name', 'id'],
          type: 'object',
        },
        isFavorite: {
          type: 'boolean',
        },
        description: {
          type: 'string',
        },
      },
      required: ['categoryMetric', 'category', 'isFavorite', 'description'],
      type: 'object',
    },
  ],
} as const;

export const ProductNameSchema = {
  type: 'string',
  example: '상품 이름',
  description: '상품 이름',
  minLength: 1,
  maxLength: 20,
} as const;

export const ProductDescriptionSchema = {
  type: 'string',
  example: '상품 설명, 최소 10자 이상, 최대 500자 이하',
  description: '상품 설명',
  minLength: 10,
  maxLength: 500,
} as const;

export const CreateProductRequestBodySchema = {
  properties: {
    categoryId: {
      $ref: '#/components/schemas/Id',
    },
    image: {
      $ref: '#/components/schemas/UrlType',
    },
    description: {
      $ref: '#/components/schemas/ProductDescription',
    },
    name: {
      $ref: '#/components/schemas/ProductName',
    },
  },
  required: ['categoryId', 'image', 'description', 'name'],
  type: 'object',
} as const;

export const UpdateProductRequestBodySchema = {
  properties: {
    categoryId: {
      $ref: '#/components/schemas/Id',
    },
    image: {
      $ref: '#/components/schemas/UrlType',
    },
    description: {
      $ref: '#/components/schemas/ProductDescription',
    },
    name: {
      $ref: '#/components/schemas/ProductName',
    },
  },
  required: ['categoryId', 'image', 'description', 'name'],
  type: 'object',
} as const;

export const CursorBasedPaginationResponse_Review_Schema = {
  properties: {
    nextCursor: {
      type: 'number',
      format: 'double',
      nullable: true,
    },
    list: {
      items: {
        $ref: '#/components/schemas/Review',
      },
      type: 'array',
    },
  },
  required: ['nextCursor', 'list'],
  type: 'object',
} as const;

export const ListReviewResponseSchema = {
  $ref: '#/components/schemas/CursorBasedPaginationResponse_Review_',
} as const;

export const OauthAppSchema = {
  properties: {
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
    appKey: {
      type: 'string',
    },
    provider: {
      type: 'string',
    },
    teamId: {
      type: 'string',
    },
    id: {
      $ref: '#/components/schemas/Id',
    },
  },
  required: ['createdAt', 'updatedAt', 'appKey', 'provider', 'teamId', 'id'],
  type: 'object',
} as const;

export const OauthProviderSchema = {
  type: 'string',
  enum: ['google', 'kakao'],
} as const;

export const UpsertOauthAppRequestBodySchema = {
  properties: {
    appKey: {
      type: 'string',
      description: `간편 로그인을 위한 인증 키 입니다.
Google 의 경우에는 "클라이언트 id" 입니다.
Kakao 의 경우에는 "REST API 키" 입니다.
실습을 위해 발급받은 키를 등록해주세요. 실제 서비스에서 사용 하는 키는 등록하시면 안됩니다.`,
    },
    provider: {
      $ref: '#/components/schemas/OauthProvider',
    },
  },
  required: ['appKey', 'provider'],
  type: 'object',
} as const;

export const FollowRequestBodySchema = {
  properties: {
    userId: {
      $ref: '#/components/schemas/Id',
      description: '팔로우할 유저의 id',
    },
  },
  required: ['userId'],
  type: 'object',
} as const;

export const CategorySchema = {
  properties: {
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    name: {
      type: 'string',
    },
    id: {
      $ref: '#/components/schemas/Id',
    },
  },
  required: ['updatedAt', 'createdAt', 'name', 'id'],
  type: 'object',
} as const;

export const EmailSchema = {
  type: 'string',
  example: 'example@email.com',
  format: 'email',
  pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$',
} as const;

export const SignUpResponseSchema = {
  properties: {
    accessToken: {
      type: 'string',
    },
    user: {
      allOf: [
        {
          $ref: '#/components/schemas/User',
        },
        {
          properties: {
            email: {
              $ref: '#/components/schemas/Email',
            },
          },
          required: ['email'],
          type: 'object',
        },
      ],
    },
  },
  required: ['accessToken', 'user'],
  type: 'object',
} as const;

export const PasswordSchema = {
  type: 'string',
  example: 'password',
  minLength: 8,
  pattern: '^([a-z]|[A-Z]|[0-9]|[!@#$%^&*])+$',
} as const;

export const SignUpRequestBodySchema = {
  properties: {
    passwordConfirmation: {
      $ref: '#/components/schemas/Password',
    },
    password: {
      $ref: '#/components/schemas/Password',
    },
    nickname: {
      $ref: '#/components/schemas/Nickname',
    },
    email: {
      $ref: '#/components/schemas/Email',
    },
  },
  required: ['passwordConfirmation', 'password', 'nickname', 'email'],
  type: 'object',
} as const;

export const SignInResponseSchema = {
  properties: {
    accessToken: {
      type: 'string',
    },
    user: {
      allOf: [
        {
          $ref: '#/components/schemas/User',
        },
        {
          properties: {
            email: {
              $ref: '#/components/schemas/Email',
            },
          },
          required: ['email'],
          type: 'object',
        },
      ],
    },
  },
  required: ['accessToken', 'user'],
  type: 'object',
} as const;

export const SignInRequestBodySchema = {
  properties: {
    password: {
      $ref: '#/components/schemas/Password',
    },
    email: {
      $ref: '#/components/schemas/Email',
    },
  },
  required: ['password', 'email'],
  type: 'object',
} as const;

export const OauthTokenSchema = {
  type: 'string',
  description: `간편 로그인 과정을 통해 발급받은 토큰입니다.<br />
Google 의 경우에는 <b>Google Id 토큰</b>(JWT) 입니다.<br/>
Kakao 의 경우에는 <b>인가 코드</b> 입니다.`,
} as const;

export const SignInWithOauthRequestBodySchema = {
  properties: {
    redirectUri: {
      type: 'string',
      description: `Kakao 의 경우에는 필수입니다.<br/>
인가 코드를 얻을 때 사용하였던 redirect_uri 값을 그대로 사용합니다.`,
      example: 'http://localhost:3000/oauth/kakao',
    },
    token: {
      $ref: '#/components/schemas/OauthToken',
    },
  },
  required: ['token'],
  type: 'object',
} as const;

export const SignUpWithOauthRequestBodySchema = {
  allOf: [
    {
      properties: {
        nickname: {
          $ref: '#/components/schemas/Nickname',
        },
      },
      required: ['nickname'],
      type: 'object',
    },
    {
      $ref: '#/components/schemas/SignInWithOauthRequestBody',
    },
  ],
} as const;
